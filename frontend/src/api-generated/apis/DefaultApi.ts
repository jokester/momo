/* tslint:disable */
/* eslint-disable */
/**
 * Momocraft Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import {
  ApiErrorDto,
  ApiErrorDtoFromJSON,
  ApiErrorDtoToJSON,
  AuthedSessionDto,
  AuthedSessionDtoFromJSON,
  AuthedSessionDtoToJSON,
  EmailAuthRequestDto,
  EmailAuthRequestDtoFromJSON,
  EmailAuthRequestDtoToJSON,
  FriendCollectionsDto,
  FriendCollectionsDtoFromJSON,
  FriendCollectionsDtoToJSON,
  FriendListDto,
  FriendListDtoFromJSON,
  FriendListDtoToJSON,
  FriendUserDto,
  FriendUserDtoFromJSON,
  FriendUserDtoToJSON,
  OAuthGoogleRequestDto,
  OAuthGoogleRequestDtoFromJSON,
  OAuthGoogleRequestDtoToJSON,
  UserCollectionListDto,
  UserCollectionListDtoFromJSON,
  UserCollectionListDtoToJSON,
  UserFriendRequestDto,
  UserFriendRequestDtoFromJSON,
  UserFriendRequestDtoToJSON,
  UserProfileDto,
  UserProfileDtoFromJSON,
  UserProfileDtoToJSON,
} from '../models';

export interface AuthControllerDoEmailSignInRequest {
  emailAuthRequestDto: EmailAuthRequestDto;
}

export interface AuthControllerDoEmailSignUpRequest {
  emailAuthRequestDto: EmailAuthRequestDto;
}

export interface AuthControllerDoGoogleOAuthRequest {
  oAuthGoogleRequestDto: OAuthGoogleRequestDto;
}

export interface MomoUserControllerGetCollectionsRequest {
  userId: string;
}

export interface MomoUserControllerListFriendCollectionsRequest {
  userId: string;
}

export interface MomoUserControllerListFriendsRequest {
  userId: string;
}

export interface MomoUserControllerPutCollectionsRequest {
  userId: string;
  userCollectionListDto: UserCollectionListDto;
}

export interface MomoUserControllerSaveUserFriendRequestRequest {
  userId: string;
  userFriendRequestDto: UserFriendRequestDto;
}

/**
 *
 */
export class DefaultApi extends runtime.BaseAPI {
  /**
   */
  async authControllerDoEmailSignInRaw(
    requestParameters: AuthControllerDoEmailSignInRequest,
  ): Promise<runtime.ApiResponse<AuthedSessionDto>> {
    if (requestParameters.emailAuthRequestDto === null || requestParameters.emailAuthRequestDto === undefined) {
      throw new runtime.RequiredError(
        'emailAuthRequestDto',
        'Required parameter requestParameters.emailAuthRequestDto was null or undefined when calling authControllerDoEmailSignIn.',
      );
    }

    const queryParameters: runtime.HTTPQuery = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request({
      path: `/auth/email/signin`,
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: EmailAuthRequestDtoToJSON(requestParameters.emailAuthRequestDto),
    });

    return new runtime.JSONApiResponse(response, (jsonValue) => AuthedSessionDtoFromJSON(jsonValue));
  }

  /**
   */
  async authControllerDoEmailSignIn(requestParameters: AuthControllerDoEmailSignInRequest): Promise<AuthedSessionDto> {
    const response = await this.authControllerDoEmailSignInRaw(requestParameters);
    return await response.value();
  }

  /**
   */
  async authControllerDoEmailSignUpRaw(
    requestParameters: AuthControllerDoEmailSignUpRequest,
  ): Promise<runtime.ApiResponse<AuthedSessionDto>> {
    if (requestParameters.emailAuthRequestDto === null || requestParameters.emailAuthRequestDto === undefined) {
      throw new runtime.RequiredError(
        'emailAuthRequestDto',
        'Required parameter requestParameters.emailAuthRequestDto was null or undefined when calling authControllerDoEmailSignUp.',
      );
    }

    const queryParameters: runtime.HTTPQuery = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request({
      path: `/auth/email/signup`,
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: EmailAuthRequestDtoToJSON(requestParameters.emailAuthRequestDto),
    });

    return new runtime.JSONApiResponse(response, (jsonValue) => AuthedSessionDtoFromJSON(jsonValue));
  }

  /**
   */
  async authControllerDoEmailSignUp(requestParameters: AuthControllerDoEmailSignUpRequest): Promise<AuthedSessionDto> {
    const response = await this.authControllerDoEmailSignUpRaw(requestParameters);
    return await response.value();
  }

  /**
   */
  async authControllerDoGoogleOAuthRaw(
    requestParameters: AuthControllerDoGoogleOAuthRequest,
  ): Promise<runtime.ApiResponse<AuthedSessionDto>> {
    if (requestParameters.oAuthGoogleRequestDto === null || requestParameters.oAuthGoogleRequestDto === undefined) {
      throw new runtime.RequiredError(
        'oAuthGoogleRequestDto',
        'Required parameter requestParameters.oAuthGoogleRequestDto was null or undefined when calling authControllerDoGoogleOAuth.',
      );
    }

    const queryParameters: runtime.HTTPQuery = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request({
      path: `/auth/oauth/google`,
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: OAuthGoogleRequestDtoToJSON(requestParameters.oAuthGoogleRequestDto),
    });

    return new runtime.JSONApiResponse(response, (jsonValue) => AuthedSessionDtoFromJSON(jsonValue));
  }

  /**
   */
  async authControllerDoGoogleOAuth(requestParameters: AuthControllerDoGoogleOAuthRequest): Promise<AuthedSessionDto> {
    const response = await this.authControllerDoGoogleOAuthRaw(requestParameters);
    return await response.value();
  }

  /**
   */
  async authControllerDoRefreshTokenRaw(): Promise<runtime.ApiResponse<AuthedSessionDto>> {
    const queryParameters: runtime.HTTPQuery = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request({
      path: `/auth/jwt/refresh`,
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
    });

    return new runtime.JSONApiResponse(response, (jsonValue) => AuthedSessionDtoFromJSON(jsonValue));
  }

  /**
   */
  async authControllerDoRefreshToken(): Promise<AuthedSessionDto> {
    const response = await this.authControllerDoRefreshTokenRaw();
    return await response.value();
  }

  /**
   */
  async authControllerDummyDoNotCallRaw(): Promise<runtime.ApiResponse<ApiErrorDto>> {
    const queryParameters: runtime.HTTPQuery = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request({
      path: `/auth/dummy/do-not-call`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters,
    });

    return new runtime.JSONApiResponse(response, (jsonValue) => ApiErrorDtoFromJSON(jsonValue));
  }

  /**
   */
  async authControllerDummyDoNotCall(): Promise<ApiErrorDto> {
    const response = await this.authControllerDummyDoNotCallRaw();
    return await response.value();
  }

  /**
   */
  async momoUserControllerGetCollectionsRaw(
    requestParameters: MomoUserControllerGetCollectionsRequest,
  ): Promise<runtime.ApiResponse<UserCollectionListDto>> {
    if (requestParameters.userId === null || requestParameters.userId === undefined) {
      throw new runtime.RequiredError(
        'userId',
        'Required parameter requestParameters.userId was null or undefined when calling momoUserControllerGetCollections.',
      );
    }

    const queryParameters: runtime.HTTPQuery = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request({
      path: `/momo/user/{userId}/collections`.replace(
        `{${'userId'}}`,
        encodeURIComponent(String(requestParameters.userId)),
      ),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters,
    });

    return new runtime.JSONApiResponse(response, (jsonValue) => UserCollectionListDtoFromJSON(jsonValue));
  }

  /**
   */
  async momoUserControllerGetCollections(
    requestParameters: MomoUserControllerGetCollectionsRequest,
  ): Promise<UserCollectionListDto> {
    const response = await this.momoUserControllerGetCollectionsRaw(requestParameters);
    return await response.value();
  }

  /**
   */
  async momoUserControllerListFriendCollectionsRaw(
    requestParameters: MomoUserControllerListFriendCollectionsRequest,
  ): Promise<runtime.ApiResponse<FriendCollectionsDto>> {
    if (requestParameters.userId === null || requestParameters.userId === undefined) {
      throw new runtime.RequiredError(
        'userId',
        'Required parameter requestParameters.userId was null or undefined when calling momoUserControllerListFriendCollections.',
      );
    }

    const queryParameters: runtime.HTTPQuery = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request({
      path: `/momo/user/{userId}/friendCollections`.replace(
        `{${'userId'}}`,
        encodeURIComponent(String(requestParameters.userId)),
      ),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters,
    });

    return new runtime.JSONApiResponse(response, (jsonValue) => FriendCollectionsDtoFromJSON(jsonValue));
  }

  /**
   */
  async momoUserControllerListFriendCollections(
    requestParameters: MomoUserControllerListFriendCollectionsRequest,
  ): Promise<FriendCollectionsDto> {
    const response = await this.momoUserControllerListFriendCollectionsRaw(requestParameters);
    return await response.value();
  }

  /**
   */
  async momoUserControllerListFriendsRaw(
    requestParameters: MomoUserControllerListFriendsRequest,
  ): Promise<runtime.ApiResponse<FriendListDto>> {
    if (requestParameters.userId === null || requestParameters.userId === undefined) {
      throw new runtime.RequiredError(
        'userId',
        'Required parameter requestParameters.userId was null or undefined when calling momoUserControllerListFriends.',
      );
    }

    const queryParameters: runtime.HTTPQuery = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request({
      path: `/momo/user/{userId}/friends`.replace(
        `{${'userId'}}`,
        encodeURIComponent(String(requestParameters.userId)),
      ),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters,
    });

    return new runtime.JSONApiResponse(response, (jsonValue) => FriendListDtoFromJSON(jsonValue));
  }

  /**
   */
  async momoUserControllerListFriends(requestParameters: MomoUserControllerListFriendsRequest): Promise<FriendListDto> {
    const response = await this.momoUserControllerListFriendsRaw(requestParameters);
    return await response.value();
  }

  /**
   */
  async momoUserControllerPutCollectionsRaw(
    requestParameters: MomoUserControllerPutCollectionsRequest,
  ): Promise<runtime.ApiResponse<UserCollectionListDto>> {
    if (requestParameters.userId === null || requestParameters.userId === undefined) {
      throw new runtime.RequiredError(
        'userId',
        'Required parameter requestParameters.userId was null or undefined when calling momoUserControllerPutCollections.',
      );
    }

    if (requestParameters.userCollectionListDto === null || requestParameters.userCollectionListDto === undefined) {
      throw new runtime.RequiredError(
        'userCollectionListDto',
        'Required parameter requestParameters.userCollectionListDto was null or undefined when calling momoUserControllerPutCollections.',
      );
    }

    const queryParameters: runtime.HTTPQuery = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request({
      path: `/momo/user/{userId}/collections`.replace(
        `{${'userId'}}`,
        encodeURIComponent(String(requestParameters.userId)),
      ),
      method: 'PUT',
      headers: headerParameters,
      query: queryParameters,
      body: UserCollectionListDtoToJSON(requestParameters.userCollectionListDto),
    });

    return new runtime.JSONApiResponse(response, (jsonValue) => UserCollectionListDtoFromJSON(jsonValue));
  }

  /**
   */
  async momoUserControllerPutCollections(
    requestParameters: MomoUserControllerPutCollectionsRequest,
  ): Promise<UserCollectionListDto> {
    const response = await this.momoUserControllerPutCollectionsRaw(requestParameters);
    return await response.value();
  }

  /**
   */
  async momoUserControllerPutSelfMetaRaw(): Promise<runtime.ApiResponse<UserProfileDto>> {
    const queryParameters: runtime.HTTPQuery = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request({
      path: `/momo/user/self`,
      method: 'PUT',
      headers: headerParameters,
      query: queryParameters,
    });

    return new runtime.JSONApiResponse(response, (jsonValue) => UserProfileDtoFromJSON(jsonValue));
  }

  /**
   */
  async momoUserControllerPutSelfMeta(): Promise<UserProfileDto> {
    const response = await this.momoUserControllerPutSelfMetaRaw();
    return await response.value();
  }

  /**
   */
  async momoUserControllerSaveUserFriendRequestRaw(
    requestParameters: MomoUserControllerSaveUserFriendRequestRequest,
  ): Promise<runtime.ApiResponse<FriendUserDto>> {
    if (requestParameters.userId === null || requestParameters.userId === undefined) {
      throw new runtime.RequiredError(
        'userId',
        'Required parameter requestParameters.userId was null or undefined when calling momoUserControllerSaveUserFriendRequest.',
      );
    }

    if (requestParameters.userFriendRequestDto === null || requestParameters.userFriendRequestDto === undefined) {
      throw new runtime.RequiredError(
        'userFriendRequestDto',
        'Required parameter requestParameters.userFriendRequestDto was null or undefined when calling momoUserControllerSaveUserFriendRequest.',
      );
    }

    const queryParameters: runtime.HTTPQuery = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request({
      path: `/momo/user/{userId}/friends`.replace(
        `{${'userId'}}`,
        encodeURIComponent(String(requestParameters.userId)),
      ),
      method: 'PUT',
      headers: headerParameters,
      query: queryParameters,
      body: UserFriendRequestDtoToJSON(requestParameters.userFriendRequestDto),
    });

    return new runtime.JSONApiResponse(response, (jsonValue) => FriendUserDtoFromJSON(jsonValue));
  }

  /**
   */
  async momoUserControllerSaveUserFriendRequest(
    requestParameters: MomoUserControllerSaveUserFriendRequestRequest,
  ): Promise<FriendUserDto> {
    const response = await this.momoUserControllerSaveUserFriendRequestRaw(requestParameters);
    return await response.value();
  }
}
